{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "copy-button",
  "type": "registry:component",
  "title": "Copy Button",
  "description": "A button component with clipboard functionality and visual feedback",
  "dependencies": ["@tabler/icons-react"],
  "registryDependencies": ["button", "tooltip"],
  "files": [
    {
      "path": "src/registry/new-york/copy-button/copy-button.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport { IconCheck, IconCopy } from \"@tabler/icons-react\";\nimport * as React from \"react\";\n\ninterface CopyButtonProps extends React.ComponentProps<typeof Button> {\n  value: string;\n}\n\nconst COPY_TIMEOUT_MS = 2000;\n\nfunction useCopyToClipboard() {\n  const [hasCopied, setHasCopied] = React.useState(false);\n  const timeoutRef = React.useRef<NodeJS.Timeout | null>(null);\n\n  const copyToClipboard = React.useCallback(async (text: string) => {\n    if (!window.navigator?.clipboard) {\n      console.warn(\"Clipboard API not available\");\n      return false;\n    }\n\n    try {\n      await window.navigator.clipboard.writeText(text);\n      setHasCopied(true);\n\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n\n      timeoutRef.current = setTimeout(() => {\n        setHasCopied(false);\n      }, COPY_TIMEOUT_MS);\n\n      return true;\n    } catch (error) {\n      console.error(\"Failed to copy to clipboard:\", error);\n      return false;\n    }\n  }, []);\n\n  React.useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  return { hasCopied, copyToClipboard };\n}\n\nexport function CopyButton({\n  value,\n  className,\n  variant = \"ghost\",\n  ...props\n}: CopyButtonProps) {\n  const [tooltipOpen, setTooltipOpen] = React.useState(false);\n  const { hasCopied, copyToClipboard } = useCopyToClipboard();\n\n  React.useEffect(() => {\n    if (hasCopied) {\n      setTooltipOpen(true);\n      const timer = setTimeout(() => {\n        setTooltipOpen(false);\n      }, COPY_TIMEOUT_MS);\n      return () => clearTimeout(timer);\n    }\n  }, [hasCopied]);\n\n  const handleCopy = React.useCallback(async () => {\n    await copyToClipboard(value);\n  }, [copyToClipboard, value]);\n\n  const Icon = hasCopied ? IconCheck : IconCopy;\n  const tooltipText = hasCopied ? \"Copied!\" : \"Copy to clipboard\";\n\n  return (\n    <Tooltip open={tooltipOpen || undefined} onOpenChange={setTooltipOpen}>\n      <TooltipTrigger asChild>\n        <Button\n          data-slot=\"copy-button\"\n          size=\"icon\"\n          variant={variant}\n          className={cn(\n            \"bg-code absolute top-3 right-2 z-10 size-7 hover:opacity-100 focus-visible:opacity-100\",\n            className,\n          )}\n          onClick={handleCopy}\n          aria-label={tooltipText}\n          {...props}\n        >\n          <span className=\"sr-only\">Copy</span>\n          <Icon stroke={1.5} />\n        </Button>\n      </TooltipTrigger>\n      <TooltipContent>\n        <span>{tooltipText}</span>\n      </TooltipContent>\n    </Tooltip>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/ui/copy-button.tsx"
    }
  ]
}
