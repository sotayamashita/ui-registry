{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "auto-resize-textarea",
  "type": "registry:component",
  "title": "Auto Resize Textarea",
  "description": "A textarea component that automatically adjusts its height based on content with IME support",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "src/registry/new-york/auto-resize-textarea/auto-resize-textarea.tsx",
      "content": "import React, { useRef, useEffect, useState, useCallback } from \"react\";\n\nconst MAX_TEXTAREA_HEIGHT = 100;\nconst MIN_TEXTAREA_HEIGHT = 32;\n\ninterface AutoResizeTextAreaProps {\n  value: string;\n  onChange: (value: string) => void;\n  onSubmit?: () => void;\n  disabled?: boolean;\n  placeholder?: string;\n}\n\nexport const AutoResizeTextArea: React.FC<AutoResizeTextAreaProps> = ({\n  value,\n  onChange,\n  disabled = false,\n  placeholder = \"Enter a message...\",\n}) => {\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n  const [isComposing, setIsComposing] = useState(false);\n  const [localValue, setLocalValue] = useState(value);\n  const measurementsCacheRef = useRef<{\n    width?: number;\n    height?: number;\n    scrollHeight?: number;\n  }>({});\n\n\n  useEffect(() => {\n    if (textAreaRef.current) {\n      textAreaRef.current.focus();\n    }\n  }, []);\n\n  // 外部からの値変更を同期（IME入力中は無視）\n  useEffect(() => {\n    if (!isComposing && value !== localValue) {\n      setLocalValue(value);\n    }\n  }, [value, isComposing, localValue]);\n\n  const adjustHeight = useCallback((element: HTMLTextAreaElement) => {\n    // パフォーマンス最適化：同じ幅なら前回の計算を再利用\n    const currentWidth = element.offsetWidth;\n    if (measurementsCacheRef.current.width === currentWidth && \n        measurementsCacheRef.current.scrollHeight === element.scrollHeight) {\n      return;\n    }\n\n    // 高さをリセットして正確なscrollHeightを取得\n    element.style.height = \"auto\";\n    const newHeight = Math.min(element.scrollHeight, MAX_TEXTAREA_HEIGHT);\n    element.style.height = `${newHeight}px`;\n\n    // キャッシュを更新\n    measurementsCacheRef.current = {\n      width: currentWidth,\n      height: newHeight,\n      scrollHeight: element.scrollHeight,\n    };\n  }, []);\n\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const newValue = e.target.value;\n    setLocalValue(newValue);\n    \n    // IME入力中でない場合は即座に親に通知\n    if (!isComposing) {\n      onChange(newValue);\n    }\n    \n    adjustHeight(e.target);\n  };\n\n  const handleCompositionStart = () => {\n    setIsComposing(true);\n  };\n\n  const handleCompositionEnd = (e: React.CompositionEvent<HTMLTextAreaElement>) => {\n    setIsComposing(false);\n    // IME確定時は即座に親に通知\n    const finalValue = e.currentTarget.value;\n    onChange(finalValue);\n    setLocalValue(finalValue);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    // IME入力中はEnterキーの処理をスキップ\n    if (isComposing) {\n      return;\n    }\n\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      const textarea = e.currentTarget;\n      const start = textarea.selectionStart;\n      const end = textarea.selectionEnd;\n      const newValue = localValue.substring(0, start) + '\\n' + localValue.substring(end);\n      \n      setLocalValue(newValue);\n      // Enterキーでの改行は即座に親に通知\n      onChange(newValue);\n      \n      // カーソル位置を設定\n      requestAnimationFrame(() => {\n        if (textAreaRef.current) {\n          textAreaRef.current.selectionStart = textAreaRef.current.selectionEnd = start + 1;\n          adjustHeight(textAreaRef.current);\n        }\n      });\n    }\n  };\n\n  // ペースト時の処理\n  const handlePaste = () => {\n    // ペースト時は即座に親に通知\n    setTimeout(() => {\n      if (textAreaRef.current && !isComposing) {\n        const newValue = textAreaRef.current.value;\n        setLocalValue(newValue);\n        onChange(newValue);\n        adjustHeight(textAreaRef.current);\n      }\n    }, 0);\n  };\n\n  // リサイズ時の処理\n  useEffect(() => {\n    const handleResize = () => {\n      if (textAreaRef.current) {\n        // キャッシュをクリアして再計算を強制\n        measurementsCacheRef.current = {};\n        adjustHeight(textAreaRef.current);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [adjustHeight]);\n\n  // 初期高さと値変更時の高さ調整\n  useEffect(() => {\n    if (textAreaRef.current) {\n      adjustHeight(textAreaRef.current);\n    }\n  }, [localValue, adjustHeight]);\n\n  return (\n    <textarea\n      ref={textAreaRef}\n      value={localValue}\n      onChange={handleChange}\n      onCompositionStart={handleCompositionStart}\n      onCompositionEnd={handleCompositionEnd}\n      onKeyDown={handleKeyDown}\n      onPaste={handlePaste}\n      rows={1}\n      className=\"w-full bg-transparent text-foreground resize-none outline-none text-sm scrollbar-hide\"\n      style={{\n        minHeight: `${MIN_TEXTAREA_HEIGHT}px`,\n        maxHeight: `${MAX_TEXTAREA_HEIGHT}px`,\n      }}\n      placeholder={placeholder}\n      readOnly={disabled}\n    />\n  );\n};",
      "type": "registry:component"
    }
  ]
}
